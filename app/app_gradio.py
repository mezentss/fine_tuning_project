import gradio as gr
import onnxruntime as ort
import numpy as np
from PIL import Image
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('..')


class BirdClassifier:
    def __init__(self, model_path="../experiments/models/resnet18.onnx"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ç–∏—Ü
        """
        # –ü–æ—Å—Ç—Ä–æ–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        app_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(app_dir)
        default_model_path = os.path.join(project_root, "experiments", "models", "resnet18.onnx")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        resolved_model_path = model_path
        if not os.path.isabs(resolved_model_path):
            resolved_model_path = os.path.normpath(os.path.join(app_dir, model_path))
        if not os.path.exists(resolved_model_path):
            resolved_model_path = default_model_path

        self.model_path = resolved_model_path
        self.class_names = ["–°–æ–≤—ã", "–í–æ—Ä–æ–Ω—ã", "–ü–æ–ø—É–≥–∞–∏"]
        self.class_descriptions = {
            "–°–æ–≤—ã": "–ù–æ—á–Ω—ã–µ —Ö–∏—â–Ω—ã–µ –ø—Ç–∏—Ü—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –ª–∏—Ü–µ–≤—ã–º –¥–∏—Å–∫–æ–º –∏ —Ç–∏—Ö–∏–º –ø–æ–ª—ë—Ç–æ–º.",
            "–í–æ—Ä–æ–Ω—ã": "–£–º–Ω—ã–µ –ø—Ç–∏—Ü—ã —Å–µ–º–µ–π—Å—Ç–≤–∞ –≤—Ä–∞–Ω–æ–≤—ã—Ö, —á–∞—Å—Ç–æ —á—ë—Ä–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞.",
            "–ü–æ–ø—É–≥–∞–∏": "–Ø—Ä–∫–∏–µ –∫—Ä–∞—Å–∞–≤—Ü—ã."
        }

        print(f"–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑: {self.model_path}")
        print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.model_path)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º ONNX –º–æ–¥–µ–ª—å
        try:
            self.ort_session = ort.InferenceSession(self.model_path)
            self.input_name = self.ort_session.get_inputs()[0].name
            self.input_shape = self.ort_session.get_inputs()[0].shape
            self.input_type = self.ort_session.get_inputs()[0].type
            print(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.model_path}")
            print(f"–í—Ö–æ–¥–Ω–æ–µ –∏–º—è: {self.input_name}")
            print(f"–í—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {self.input_shape}")
            print(f"–í—Ö–æ–¥–Ω–æ–π —Ç–∏–ø: {self.input_type}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            self.ort_session = None

    def preprocess(self, image):
        """
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            if image.mode != 'RGB':
                image = image.convert('RGB')

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 224x224 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è ResNet)
            image = image.resize((224, 224))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º float32
            img_data = np.array(image, dtype=np.float32)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (0-1)
            img_data = img_data / 255.0

            # ImageNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            mean = np.array([0.485, 0.456, 0.406], dtype=np.float32)
            std = np.array([0.229, 0.224, 0.225], dtype=np.float32)

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for i in range(3):
                img_data[:, :, i] = (img_data[:, :, i] - mean[i]) / std[i]

            # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (H, W, C) -> (C, H, W)
            img_data = np.transpose(img_data, (2, 0, 1))

            # –î–æ–±–∞–≤–ª—è–µ–º batch dimension
            img_data = np.expand_dims(img_data, axis=0)

            print(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {img_data.dtype}")
            print(f"–§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {img_data.shape}")

            return img_data

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π —Ç–µ–Ω–∑–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ —Ç–∏–ø–∞
            return np.zeros((1, 3, 224, 224), dtype=np.float32)

    def classify(self, image):
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.ort_session is None:
                print("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return self._get_test_prediction()

            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            input_data = self.preprocess(image)

            # –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            if input_data.dtype != np.float32:
                print(f"–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {input_data.dtype} -> float32")
                input_data = input_data.astype(np.float32)

            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {input_data.dtype}")

            # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
            outputs = self.ort_session.run(None, {self.input_name: input_data})
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤: {len(outputs)}")

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥
            predictions = outputs[0]
            print(f"–§–æ—Ä–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {predictions.shape}")

            # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –∏–º–µ–µ—Ç batch dimension, —É–±–∏—Ä–∞–µ–º –µ–µ
            if len(predictions.shape) > 1:
                predictions = predictions[0]

            # Softmax –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            exp_predictions = np.exp(predictions - np.max(predictions))
            probabilities = exp_predictions / np.sum(exp_predictions)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
            predicted_class_idx = np.argmax(probabilities)
            predicted_class = self.class_names[predicted_class_idx]
            confidence = probabilities[predicted_class_idx]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = {
                "predicted_class": predicted_class,
                "confidence": float(confidence),
                "description": self.class_descriptions[predicted_class],
                "all_probabilities": {
                    class_name: float(prob)
                    for class_name, prob in zip(self.class_names, probabilities)
                }
            }

            print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {predicted_class}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f}")
            return results

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return self._get_error_prediction(str(e))

    def _get_test_prediction(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"""
        return {
            "predicted_class": "–°–æ–≤—ã",
            "confidence": 0.85,
            "description": self.class_descriptions["–°–æ–≤—ã"],
            "all_probabilities": {
                "–°–æ–≤—ã": 0.85,
                "–í–æ—Ä–æ–Ω—ã": 0.10,
                "–ü–æ–ø—É–≥–∞–∏": 0.05
            }
        }

    def _get_error_prediction(self, error_msg):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "predicted_class": "–û—à–∏–±–∫–∞",
            "confidence": 0.0,
            "description": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}",
            "all_probabilities": {
                "–°–æ–≤—ã": 0.33,
                "–í–æ—Ä–æ–Ω—ã": 0.33,
                "–ü–æ–ø—É–≥–∞–∏": 0.34
            }
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
classifier = BirdClassifier()


def classify_image(image):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    if image is None:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã", {"–°–æ–≤—ã": 0, "–í–æ—Ä–æ–Ω—ã": 0, "–ü–æ–ø—É–≥–∞–∏": 0}

    try:
        results = classifier.classify(image)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = f"""
**üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:** {results['predicted_class']}

**üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {results['confidence']:.2%}

**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {results['description']}

**üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:**
"""

        for class_name, prob in results['all_probabilities'].items():
            output += f"- **{class_name}:** {prob:.2%}\n"

        return output, results['all_probabilities']

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        return error_msg, {"–°–æ–≤—ã": 0, "–í–æ—Ä–æ–Ω—ã": 0, "–ü–æ–ø—É–≥–∞–∏": 0}


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def preprocess_alternative(image):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    image = image.convert('RGB').resize((224, 224))

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array —Å float32
    img_array = np.array(image, dtype=np.float32)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 0-1
    img_array = img_array / 255.0

    # ImageNet –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    mean = np.array([0.485, 0.456, 0.406], dtype=np.float32)
    std = np.array([0.229, 0.224, 0.225], dtype=np.float32)
    img_array = (img_array - mean) / std

    # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ batch dimension
    img_array = np.transpose(img_array, (2, 0, 1))
    img_array = np.expand_dims(img_array, axis=0)

    return img_array


# –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
def test_model_with_sample():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = Image.new('RGB', (224, 224), color=(100, 150, 200))
        result = classifier.classify(test_image)
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {result['predicted_class']}")
        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        return False


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
test_model_with_sample()

# –°–æ–∑–¥–∞–µ–º Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(theme=gr.themes.Soft(), title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ç–∏—Ü") as interface:
    gr.Markdown("# üê¶ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ç–∏—Ü")
    gr.Markdown("""
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
    - **ü¶â –°–æ–≤—ã** 
    - **üê¶‚Äç‚¨õ –í–æ—Ä–æ–Ω—ã**   
    - **ü¶Ö –ü–æ–ø—É–≥–∞–∏** 
    """)

    with gr.Row():
        with gr.Column(scale=1):
            image_input = gr.Image(
                type="pil",
                label="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã",
                height=300
            )
            classify_btn = gr.Button(
                "üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
                variant="primary",
                size="lg"
            )

        with gr.Column(scale=1):
            text_output = gr.Markdown(
                label="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                value="–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
            )
            label_output = gr.Label(
                label="üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º",
                num_top_classes=3
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    classify_btn.click(
        fn=classify_image,
        inputs=image_input,
        outputs=[text_output, label_output]
    )

    gr.Markdown("### üí° –°–æ–≤–µ—Ç—ã:")
    gr.Markdown("""
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ç–∏—Ü
    - –ü—Ç–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞
    - –õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ–æ—Ç–æ —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
    """)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("üì¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:7860")

    try:
        interface.launch(
            server_name="127.0.0.1",
            server_port=7860,
            share=False,
            inbrowser=True,
            show_error=True
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É...")
        interface.launch(
            server_name="127.0.0.1",
            share=False,
            inbrowser=True
        )